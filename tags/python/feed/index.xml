<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Daniel E. Cook</title>
    <link>https://www.danielecook.com/tags/python/</link>
    <description>Recent content in python on Daniel E. Cook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Fri, 25 Oct 2019 01:15:53 +0000</lastBuildDate>
    
	<atom:link href="https://www.danielecook.com/tags/python/feed/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>From Pandas to Google Sheets</title>
      <link>https://www.danielecook.com/from-pandas-to-google-sheets/</link>
      <pubDate>Fri, 25 Oct 2019 01:15:53 +0000</pubDate>
      
      <guid>https://www.danielecook.com/from-pandas-to-google-sheets/</guid>
      <description>I wrote the following snippet to post datasets (e.g. TSVs or CSVs) to google sheets. In order to get this to work you will need to authorize google sheets access.
Then you can set the content of any google sheets worksheet to the data from a pandas dataframe by using the pandas_to_sheets function.
#!/usr/bin/env python import gspread from pandas import pd from oauth2client.service_account import ServiceAccountCredentials def iter_pd(df): for val in df.</description>
    </item>
    
    <item>
      <title>Python Command-line skeleton</title>
      <link>https://www.danielecook.com/python-command-line-skeleton/</link>
      <pubDate>Thu, 02 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.danielecook.com/python-command-line-skeleton/</guid>
      <description>Writing a command-line interface (CLI) is an easy way to extend the functionality and ease of use of any code you write.
Python comes with the built-in module, argparse, that can be used to easily develop command-line interfaces. To speed up the process, I have developed a &amp;lsquo;skeleton&amp;rsquo; application that can be forked on github and used to quickly develop CLI programs in python.
The repo has the following features added:</description>
    </item>
    
    <item>
      <title>Double Checking FASTQs</title>
      <link>https://www.danielecook.com/double-checking-fastqs/</link>
      <pubDate>Sat, 24 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.danielecook.com/double-checking-fastqs/</guid>
      <description>When you have performed a sequencing project, quality control is one of the first things you will need to do. Unfortunately, sample mix-ups and other issues can and do happen. Systematic biases can also occur by machine and lane.
This script will extracting basic information from a set of FASTQs and output it to summary file (fastq_summary.txt). This will work with demultiplexed FASTQs generated by Illumina machines that appear in the following format:</description>
    </item>
    
    <item>
      <title>Downloading and storing bioinformatic databases locally</title>
      <link>https://www.danielecook.com/downloading-and-storing-bioinformatic-databases-locally/</link>
      <pubDate>Mon, 20 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.danielecook.com/downloading-and-storing-bioinformatic-databases-locally/</guid>
      <description>If you need to annotate biological data there are plenty of resources online (UCSC Genome Browser, BioMart), and plenty of programmatic tools to interact with these databases as well. But if you are going to be annotating a large dataset (like ChIP-Seq or RNA-Seq data) – you will probably not want to rely on web based services because a) It is inefficient b) You may get throttled or banned.
If you use python, it is easy to download and store data in an SQlite database.</description>
    </item>
    
    <item>
      <title>Fetch Data from UCSC Genome Browser</title>
      <link>https://www.danielecook.com/fetch-data-from-ucsc-genome-browser/</link>
      <pubDate>Sun, 03 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.danielecook.com/fetch-data-from-ucsc-genome-browser/</guid>
      <description>Original Post (2013-11-03) Previously, I’ve shown that you can use a mysql database browser (e.g. Sequel Pro) to access and browse the UCSC Genome Browser MySQL database.
If you have a small dataset that you would like to annotate, you can write SQL statements to fetch data. Below I show how you can use python to fetch genome coordinates by specifying gene and genome build.
# Note: Requires mysqldb; install using: # pip install MySQL-python from MySQLdb.</description>
    </item>
    
  </channel>
</rss>